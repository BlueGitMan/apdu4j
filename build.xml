<?xml version="1.0"?>
<project name="apdu4j" default="dist" basedir=".">
  <description>apdu4j - smart card utilities for Java</description>
  <!-- Fetch and integrity check dependencies -->
  <target name="fetch" description="fetch dependencies">
    <ant dir="ext/jnasmartcardio" target="init"/>
    <mkdir dir="lib"/>
    <!-- Remember to update apdu4j.pro and .classpath as well! -->
    <get src="https://repo1.maven.org/maven2/net/sf/jopt-simple/jopt-simple/4.9/jopt-simple-4.9.jar" dest="lib" verbose="true" skipexisting="true"/>
    <get src="http://central.maven.org/maven2/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar" dest="lib" verbose="true" skipexisting="true"/>
    <get src="http://central.maven.org/maven2/com/googlecode/lanterna/lanterna/3.0.0-beta1/lanterna-3.0.0-beta1.jar" dest="lib" verbose="true" skipexisting="true"/>
    <checksum algorithm="SHA1" file="lib/jopt-simple-4.9.jar" property="ee9e9eaa0a35360dcfeac129ff4923215fd65904" verifyProperty="joptOK"/>
    <checksum algorithm="SHA1" file="lib/json-simple-1.1.1.jar" property="c9ad4a0850ab676c5c64461a05ca524cdfff59f1" verifyProperty="jsonOK"/>
    <checksum algorithm="SHA1" file="lib/lanterna-3.0.0-beta1.jar" property="0ec22faf7c2070a68f162f73370972c186dcae90" verifyProperty="lanternaOK"/>
    <fail message="Checksum failure">
      <condition>
        <or>
          <isfalse value="${joptOK}"/>
          <isfalse value="${jsonOK}"/>
          <isfalse value="${lanternaOK}"/>
        </or>
      </condition>
    </fail>
  </target>
  <!-- Build the software -->
  <path id="build.classpath">
    <pathelement location="ext/jnasmartcardio/jnasmartcardio.jar"/>
    <pathelement location="lib/jopt-simple-4.9.jar"/>
    <pathelement location="lib/json-simple-1.1.1.jar"/>
    <pathelement location="lib/lanterna-3.0.0-beta1.jar"/>
  </path>
  <target name="deps" description="build jnasmartcardio">
    <ant dir="ext/jnasmartcardio"/>
  </target>
  <target name="compile" description="compile the source" depends="fetch,deps">
    <mkdir dir="build"/>
    <javac target="1.7" source="1.7" srcdir="src" destdir="build" includeantruntime="false" excludes="**/tests/**" debug="true" debuglevel="lines,vars,source">
      <compilerarg value="-Xlint"/>
      <classpath refid="build.classpath"/>
    </javac>
  </target>
  <!-- Package it into a nice little JAR -->
  <target name="dist" depends="compile" description="generate the distribution">
    <!-- Build adpu4j.jar -->
    <java classname="proguard.ProGuard" fork="true" failonerror="true">
      <arg line="@apdu4j.pro"/>
      <classpath>
        <pathelement location="ext/proguard.jar"/>
      </classpath>
    </java>
    <jar destfile="apdu4j.jar" level="9">
      <zipfileset src="ext/jnasmartcardio/jnasmartcardio.jar"/>
      <zipfileset src="optimized-apdu4j.jar" excludes="META-INF/maven/"/>
      <manifest><attribute name="Main-Class" value="apdu4j.SCTool"/></manifest>
    </jar>
    <delete file="optimized-apdu4j.jar"/>
    <!-- JAR without jnasmartcardio and command line -->
    <jar destfile="apdu4j-vanilla.jar" level="9" basedir="build" excludes="**/apdu4j/SCTool.class"/>
  </target>
  <!-- Package for Unix -->
  <target name="shelldist" depends="dist" description="generate executable shell file">
    <concat destfile="apdu4j.sh" binary="true">
      <filelist files="pre.sh,apdu4j.jar"/>
    </concat>
    <exec failonerror="true" command="chmod +x apdu4j.sh"/>
  </target>
  <!-- Wrap the JAR into .EXE for Windows users -->
  <target name="windist" depends="dist" description="package as .exe">
    <property name="launch4j.dir" location="ext/launch4j"/>
    <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar"/>
    <launch4j>
      <config headerType="console" outfile="apdu4j.exe" jar="apdu4j.jar" errTitle="apdu4j">
        <jre minVersion="1.7.0"/>
      </config>
    </launch4j>
  </target>
  <!-- Clean the source tree -->
  <target name="clean" description="clean up">
    <ant dir="ext/jnasmartcardio" target="clean"/>
    <delete dir="build"/>
    <delete dir="javadoc"/>
    <delete file="apdu4j.jar"/>
    <delete file="apdu4j.exe"/>
    <delete file="apdu4j-vanilla.jar"/>
  </target>
  <!-- Make javadocs -->
  <target name="javadoc">
    <javadoc destdir="javadoc" Overview="doc/overview.html" Windowtitle="apdu4j - smart card utilities for Java" Doctitle="apdu4j tools and classes" access="public" linksource="true">
      <link href="https://docs.oracle.com/javase/8/docs/api/" offline="true" packagelistLoc="misc/javadoc/api"/>
      <link href="https://docs.oracle.com/javase/8/docs/jre/api/security/smartcardio/spec/" offline="true" packagelistLoc="misc/javadoc/smartcardio"/>
      <packageset dir="src">
        <include name="apdu4j/"/>
        <exclude name="apdu4j/tests/**"/>
      </packageset>
      <classpath refid="build.classpath"/>
    </javadoc>
  </target>
  <!-- Put javadocs online -->
  <target name="javadoc-publish" depends="javadoc">
    <exec failonerror="true" command="misc/ghp-import -n -m 'Publish updated javadocs' -p javadoc"/>
  </target>
  <!-- Do a full release to github -->
  <target name="release" depends="clean,dist,javadoc">
    <exec failonerror="true" command="test -n &quot;$(git status -s)&quot;"/>
    <input message="Publish version:" addproperty="release.version"/>
    <input message="Do you want to release ${release.version}?" validargs="y,n" addproperty="do.release"/>
    <condition property="do.abort">
      <equals arg1="n" arg2="${do.release}"/>
    </condition>
    <fail if="do.abort">Not releasing ${release.version}.</fail>
    <echo message="Releasing ${release.version} to Github"/>
    <exec failonerror="true" command="git tag -s ${release.version} -m 'Release ${release.version}'"/>
    <exec failonerror="true" command="git push --tags origin master"/>
    <antcall task="javadoc-publish"/>
  </target>
</project>
